// Code generated by MockGen. DO NOT EDIT.
// Source: internal/telegramClient/telegramClient.go

// Package mock_telegramClient is a generated GoMock package.
package mock_telegramClient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	telegram "github.com/xelaj/mtproto/telegram"
)

// MockTelegramClient is a mock of TelegramClient interface.
type MockTelegramClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramClientMockRecorder
}

// MockTelegramClientMockRecorder is the mock recorder for MockTelegramClient.
type MockTelegramClientMockRecorder struct {
	mock *MockTelegramClient
}

// NewMockTelegramClient creates a new mock instance.
func NewMockTelegramClient(ctrl *gomock.Controller) *MockTelegramClient {
	mock := &MockTelegramClient{ctrl: ctrl}
	mock.recorder = &MockTelegramClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramClient) EXPECT() *MockTelegramClientMockRecorder {
	return m.recorder
}

// AuthSignIn mocks base method.
func (m *MockTelegramClient) AuthSignIn(code string, sentCode *telegram.AuthSentCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthSignIn", code, sentCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthSignIn indicates an expected call of AuthSignIn.
func (mr *MockTelegramClientMockRecorder) AuthSignIn(code, sentCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSignIn", reflect.TypeOf((*MockTelegramClient)(nil).AuthSignIn), code, sentCode)
}

// Authorization mocks base method.
func (m *MockTelegramClient) Authorization(phone string) (*telegram.AuthSentCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", phone)
	ret0, _ := ret[0].(*telegram.AuthSentCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockTelegramClientMockRecorder) Authorization(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockTelegramClient)(nil).Authorization), phone)
}

// Chats mocks base method.
func (m *MockTelegramClient) Chats() ([]telegram.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chats")
	ret0, _ := ret[0].([]telegram.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chats indicates an expected call of Chats.
func (mr *MockTelegramClientMockRecorder) Chats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chats", reflect.TypeOf((*MockTelegramClient)(nil).Chats))
}

// Contacts mocks base method.
func (m *MockTelegramClient) Contacts() ([]telegram.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contacts")
	ret0, _ := ret[0].([]telegram.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contacts indicates an expected call of Contacts.
func (mr *MockTelegramClientMockRecorder) Contacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contacts", reflect.TypeOf((*MockTelegramClient)(nil).Contacts))
}

// Dialogs mocks base method.
func (m *MockTelegramClient) Dialogs() ([]telegram.Dialog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialogs")
	ret0, _ := ret[0].([]telegram.Dialog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dialogs indicates an expected call of Dialogs.
func (mr *MockTelegramClientMockRecorder) Dialogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialogs", reflect.TypeOf((*MockTelegramClient)(nil).Dialogs))
}

// GetCurrentUser mocks base method.
func (m *MockTelegramClient) GetCurrentUser() (telegram.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser")
	ret0, _ := ret[0].(telegram.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockTelegramClientMockRecorder) GetCurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockTelegramClient)(nil).GetCurrentUser))
}

// GetUser mocks base method.
func (m *MockTelegramClient) GetUser(username string) (**telegram.ContactsResolvedPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(**telegram.ContactsResolvedPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockTelegramClientMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockTelegramClient)(nil).GetUser), username)
}

// HandleUpdates mocks base method.
func (m *MockTelegramClient) HandleUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleUpdates")
}

// HandleUpdates indicates an expected call of HandleUpdates.
func (mr *MockTelegramClientMockRecorder) HandleUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdates", reflect.TypeOf((*MockTelegramClient)(nil).HandleUpdates))
}

// SendMessage mocks base method.
func (m *MockTelegramClient) SendMessage(message string, userId int32, accessHash int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message, userId, accessHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramClientMockRecorder) SendMessage(message, userId, accessHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramClient)(nil).SendMessage), message, userId, accessHash)
}
