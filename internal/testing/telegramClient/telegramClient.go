// Code generated by MockGen. DO NOT EDIT.
// Source: internal/telegramClient/telegramClient.go

// Package mock_telegramClient is a generated GoMock package.
package mock_telegramClient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTelegramClient is a mock of TelegramClient interface.
type MockTelegramClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramClientMockRecorder
}

// MockTelegramClientMockRecorder is the mock recorder for MockTelegramClient.
type MockTelegramClientMockRecorder struct {
	mock *MockTelegramClient
}

// NewMockTelegramClient creates a new mock instance.
func NewMockTelegramClient(ctrl *gomock.Controller) *MockTelegramClient {
	mock := &MockTelegramClient{ctrl: ctrl}
	mock.recorder = &MockTelegramClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramClient) EXPECT() *MockTelegramClientMockRecorder {
	return m.recorder
}

// MuteChat mocks base method.
func (m *MockTelegramClient) MuteChat(id string, unMute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteChat", id, unMute)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteChat indicates an expected call of MuteChat.
func (mr *MockTelegramClientMockRecorder) MuteChat(id, unMute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteChat", reflect.TypeOf((*MockTelegramClient)(nil).MuteChat), id, unMute)
}

// MuteUser mocks base method.
func (m *MockTelegramClient) MuteUser(id, accessHash string, unMute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteUser", id, accessHash, unMute)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteUser indicates an expected call of MuteUser.
func (mr *MockTelegramClientMockRecorder) MuteUser(id, accessHash, unMute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteUser", reflect.TypeOf((*MockTelegramClient)(nil).MuteUser), id, accessHash, unMute)
}

// SendMessage mocks base method.
func (m *MockTelegramClient) SendMessage(peer, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", peer, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramClientMockRecorder) SendMessage(peer, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramClient)(nil).SendMessage), peer, message)
}
