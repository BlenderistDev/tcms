// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/AutomationRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	model "tcms/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockAutomationRepository is a mock of AutomationRepository interface.
type MockAutomationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationRepositoryMockRecorder
}

// MockAutomationRepositoryMockRecorder is the mock recorder for MockAutomationRepository.
type MockAutomationRepositoryMockRecorder struct {
	mock *MockAutomationRepository
}

// NewMockAutomationRepository creates a new mock instance.
func NewMockAutomationRepository(ctrl *gomock.Controller) *MockAutomationRepository {
	mock := &MockAutomationRepository{ctrl: ctrl}
	mock.recorder = &MockAutomationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutomationRepository) EXPECT() *MockAutomationRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockAutomationRepository) GetAll(ctx context.Context) ([]model.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAutomationRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAutomationRepository)(nil).GetAll), ctx)
}

// Remove mocks base method.
func (m *MockAutomationRepository) Remove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockAutomationRepositoryMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockAutomationRepository)(nil).Remove), ctx, id)
}

// Save mocks base method.
func (m *MockAutomationRepository) Save(ctx context.Context, automation model.NewAutomation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, automation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAutomationRepositoryMockRecorder) Save(ctx, automation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAutomationRepository)(nil).Save), ctx, automation)
}

// Update mocks base method.
func (m *MockAutomationRepository) Update(ctx context.Context, id string, automation model.NewAutomation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, automation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAutomationRepositoryMockRecorder) Update(ctx, id, automation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAutomationRepository)(nil).Update), ctx, id, automation)
}
